plugins {
    id 'org.springframework.boot' version '2.3.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java-library'
    id 'application'
}

allprojects {

    repositories {
        mavenCentral()
        jcenter()
    }

    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java-library'

    /** Top level dependencies */
    dependencies {

        // Spring
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-test'
        implementation 'org.jetbrains:annotations:19.0.0'

        // MongoDB
        implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

    }
}

task buildApp() {

    if (project.hasProperty('mainClass')) {

        if (project.property('mainClass') == "local") {
            println("\nLocal")
            allprojects {
                springBoot {
                    mainClassName = 'com.wynlo.BootLocal'
                }
            }
            subprojects.forEach {
                buildApp.dependsOn it.tasks.getByName('build')
            }
        }
        else if (project.property('mainClass') == "staging") {
            println("\nStaging")
            allprojects {
                springBoot {
                    mainClassName = 'com.wynlo.BootStaging'
                }
            }
            subprojects.forEach {
                buildApp.dependsOn it.tasks.getByName('build')
            }
        }
        else if (project.property('mainClass') == "production") {
            println("\nProduction")
            allprojects {
                springBoot {
                    mainClassName = 'com.wynlo.BootProduction'
                }
            }
            subprojects.forEach {
                buildApp.dependsOn it.tasks.getByName('build')
            }
        }
        else {
            println('Please set valid property mainClass (e.g. -PmainClass=local). Options: local, staging, production')
        }
    }

    else {
        println('Please set valid property mainClass (e.g. -PmainClass=local). Options: local, staging, production')
    }

}

